input {
  beats {
    type => "beats"
    port => 5044
    tags => [ 'kubernetes' ]
  }
  beats {
    type => "beats"
    port => 5046
    tags => [ 'docker' ]
  }
  beats {
    type => "beats"
    port => 5047
    tags => [ 'audit-k8s' ]
  }
  syslog {
    port => 514
    type => "syslog"
  }
}

filter {
  if "docker" in [tags] {
    grok {
      match => {
        "message" => '%{IPORHOST:host_name} - - \[%{HTTPDATE:access_time}\] "%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}" %{NUMBER:response_code} %{NUMBER:body_sent_byte} "-" "%{DATA:referrer}" "-"'
      }
      remove_field => ["message"]
    }
    mutate {
      add_field => { "host_ip" => "%{[@metadata][ip]}" }
    }
  }
  else if "kubernetes" in [tags] {
    grok {
      match => {
        "message" => '%{IPORHOST:host_name} - - \[%{HTTPDATE:access_time}\] "%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}" %{NUMBER:response_code} %{NUMBER:body_sent_byte} "-" "%{DATA:referrer}" "-"'
      }
      remove_field => ["message"]
    }
    if [kubernetes][node][uid] {
      mutate {
        replace => { "[kubernetes][node][uid]" => "********" }
      }
    }
    mutate {
     remove_field => [
       "[kubernetes][node][hostname]",
       "[host][os][version]",
       "[host][os][platform]",
       "[host][os][name]",
       "[host][ip]",
       "[host][mac]",
       "[host][os][codename]",
       "[host][os][family]",
       "[host][os][kernel]",
       "[host][os][platform]",
       "[host][os][type]",
       "[host][os][version]",
       "[host][architecture]",
       "[container][id]",
       "[agent][version]",
       "[agent][id]",
       "[agent][hostname]",
       "[agent][ephemeral_id]",
       "[agent][type]",
       "[agent][name]",
       "[kubernetes][labels][pod-template-generation]",
       "[kubernetes][namespace_uid]",
       "[kubernetes][pod][uid]",
       "[log][file][path]",
       "[log][offset]",
       "[kubernetes][node][labels][kubernetes_io/os]",
       "[kubernetes][node][labels][kubernetes_io/hostname]",
       "[kubernetes][node][labels][kubernetes_io/arch]",
       "[kubernetes][node][labels][beta_kubernetes_io/os]",
       "[kubernetes][node][labels][beta_kubernetes_io/arch]",
       "[kubernetes][labels][controller-revision-hash]",
       "[host][hostname]"
     ]
    }
  }
  else if [type] == "syslog" {
    grok {
      match => {
        "message" => '%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} %{DATA:program}(\[%{POSINT:pid}\])?: %{GREEDYDATA:syslog_message}'
      }
      remove_field => ["message"]
    }
    mutate {
      add_field => { "[@metadata][index_prefix]" => "syslog-%{[host]}" }
    }
  }
}
output {
    if "docker" in [tags] {
    elasticsearch {
      hosts => ["http://192.168.1.113:9200"]
      ssl_certificate_verification => false
      user => "elastic"
      password => "asus1650"
      index => "docker-%{[@metadata][ip]}-%{+YYYY.MM.dd}"
    }
  }
  else if "kubernetes" in [tags] {
    elasticsearch {
      hosts => ["http://192.168.1.113:9200"]
      ssl_certificate_verification => false
      user => "elastic"
      password => "asus1650"
      index => "k8s-%{+YYYY.MM.dd}"
    }
  } else if [type] == "syslog" {
    elasticsearch {
      hosts => ["http://192.168.1.113:9200"]
      ssl_certificate_verification => false
      user => "elastic"
      password => "asus1650"
      index => "%{[@metadata][index_prefix]}-%{+YYYY.MM.dd}"
    }

  }else if "audit-k8s" in [tags] {
    elasticsearch {
      hosts => ["http://192.168.1.113:9200"]
      ssl_certificate_verification => false
      user => "elastic"
      password => "asus1650"
      index => "audit-k8s%{+YYYY.MM.dd}"
    }
   }
}
